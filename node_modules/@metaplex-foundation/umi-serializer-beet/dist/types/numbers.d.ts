import { NumberSerializerOptions, Serializer } from '@metaplex-foundation/umi';
export declare const u8: (options?: NumberSerializerOptions) => Serializer<number>;
export declare const u16: (options?: NumberSerializerOptions) => Serializer<number>;
export declare const u32: (options?: NumberSerializerOptions) => Serializer<number>;
export declare const i8: (options?: NumberSerializerOptions) => Serializer<number>;
export declare const i16: (options?: NumberSerializerOptions) => Serializer<number>;
export declare const i32: (options?: NumberSerializerOptions) => Serializer<number>;
/**
 * Same as u16, but serialized with 1 to 3 bytes.
 *
 * If the value is above 0x7f, the top bit is set and the remaining
 * value is stored in the next bytes. Each byte follows the same
 * pattern until the 3rd byte. The 3rd byte, if needed, uses
 * all 8 bits to store the last byte of the original value.
 */
export declare function shortU16(): Serializer<number>;
export declare const u64: (options?: NumberSerializerOptions) => {
    serialize: (value: number | bigint) => Uint8Array<ArrayBufferLike>;
    description: string;
    fixedSize: number | null;
    maxSize: number | null;
    deserialize: (buffer: Uint8Array, offset?: number) => [bigint, number];
};
export declare const u128: (options?: NumberSerializerOptions) => {
    serialize: (value: number | bigint) => Uint8Array<ArrayBufferLike>;
    description: string;
    fixedSize: number | null;
    maxSize: number | null;
    deserialize: (buffer: Uint8Array, offset?: number) => [bigint, number];
};
export declare const i64: (options?: NumberSerializerOptions) => {
    serialize: (value: number | bigint) => Uint8Array<ArrayBufferLike>;
    description: string;
    fixedSize: number | null;
    maxSize: number | null;
    deserialize: (buffer: Uint8Array, offset?: number) => [bigint, number];
};
export declare const i128: (options?: NumberSerializerOptions) => {
    serialize: (value: number | bigint) => Uint8Array<ArrayBufferLike>;
    description: string;
    fixedSize: number | null;
    maxSize: number | null;
    deserialize: (buffer: Uint8Array, offset?: number) => [bigint, number];
};
export declare const f32: () => Serializer<number>;
export declare const f64: () => Serializer<number>;
