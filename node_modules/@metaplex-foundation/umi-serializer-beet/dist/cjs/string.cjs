'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var umi = require('@metaplex-foundation/umi');
var errors = require('./errors.cjs');
var getSizeDescription = require('./getSizeDescription.cjs');
var numbers = require('./numbers.cjs');

function string(options = {}) {
  const size = options.size ?? numbers.u32();
  const encoding = options.encoding ?? umi.utf8;
  const description = options.description ?? `string(${encoding.description}; ${getSizeDescription.getSizeDescription(size)})`;
  if (size === 'variable') {
    return {
      ...encoding,
      description
    };
  }
  if (typeof size === 'number') {
    return umi.fixSerializer(encoding, size, description);
  }
  return {
    description,
    fixedSize: null,
    maxSize: null,
    serialize: value => {
      const contentBytes = encoding.serialize(value);
      const lengthBytes = size.serialize(contentBytes.length);
      return umi.mergeBytes([lengthBytes, contentBytes]);
    },
    deserialize: (buffer, offset = 0) => {
      if (buffer.slice(offset).length === 0) {
        throw new errors.DeserializingEmptyBufferError('string');
      }
      const [lengthBigInt, lengthOffset] = size.deserialize(buffer, offset);
      const length = Number(lengthBigInt);
      offset = lengthOffset;
      const contentBuffer = buffer.slice(offset, offset + length);
      if (contentBuffer.length < length) {
        throw new errors.NotEnoughBytesError('string', length, contentBuffer.length);
      }
      const [value, contentOffset] = encoding.deserialize(contentBuffer);
      offset += contentOffset;
      return [value, offset];
    }
  };
}

exports.string = string;
//# sourceMappingURL=string.cjs.map
