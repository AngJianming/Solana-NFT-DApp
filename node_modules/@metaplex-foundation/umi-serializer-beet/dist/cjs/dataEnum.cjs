'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var umi = require('@metaplex-foundation/umi');
var errors = require('./errors.cjs');
var maxSerializerSizes = require('./maxSerializerSizes.cjs');
var numbers = require('./numbers.cjs');
var sumSerializerSizes = require('./sumSerializerSizes.cjs');

function dataEnum(variants, options = {}) {
  const prefix = options.size ?? numbers.u8();
  const fieldDescriptions = variants.map(([name, serializer]) => `${String(name)}${serializer ? `: ${serializer.description}` : ''}`).join(', ');
  const allVariantHaveTheSameFixedSize = variants.every((one, i, all) => one[1].fixedSize === all[0][1].fixedSize);
  const fixedVariantSize = allVariantHaveTheSameFixedSize ? variants[0][1].fixedSize : null;
  const maxVariantSize = maxSerializerSizes.maxSerializerSizes(variants.map(([, field]) => field.maxSize));
  return {
    description: options.description ?? `dataEnum(${fieldDescriptions}; ${prefix.description})`,
    fixedSize: variants.length === 0 ? prefix.fixedSize : sumSerializerSizes.sumSerializerSizes([prefix.fixedSize, fixedVariantSize]),
    maxSize: variants.length === 0 ? prefix.maxSize : sumSerializerSizes.sumSerializerSizes([prefix.maxSize, maxVariantSize]),
    serialize: variant => {
      const discriminator = variants.findIndex(([key]) => variant.__kind === key);
      if (discriminator < 0) {
        throw new errors.BeetSerializerError(`Invalid data enum variant. Got "${variant.__kind}", expected one of ` + `[${variants.map(([key]) => key).join(', ')}]`);
      }
      const variantPrefix = prefix.serialize(discriminator);
      const variantSerializer = variants[discriminator][1];
      const variantBytes = variantSerializer.serialize(variant);
      return umi.mergeBytes([variantPrefix, variantBytes]);
    },
    deserialize: (bytes, offset = 0) => {
      if (bytes.slice(offset).length === 0) {
        throw new errors.DeserializingEmptyBufferError('dataEnum');
      }
      const [discriminator, dOffset] = prefix.deserialize(bytes, offset);
      offset = dOffset;
      const variantField = variants[Number(discriminator)] ?? null;
      if (!variantField) {
        throw new errors.BeetSerializerError(`Data enum index "${discriminator}" is out of range. ` + `Index should be between 0 and ${variants.length - 1}.`);
      }
      const [variant, vOffset] = variantField[1].deserialize(bytes, offset);
      offset = vOffset;
      return [{
        __kind: variantField[0],
        ...(variant ?? {})
      }, offset];
    }
  };
}

exports.dataEnum = dataEnum;
//# sourceMappingURL=dataEnum.cjs.map
