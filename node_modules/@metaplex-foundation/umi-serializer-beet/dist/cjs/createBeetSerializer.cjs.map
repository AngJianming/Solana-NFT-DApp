{"version":3,"file":"createBeetSerializer.cjs","sources":["../../src/createBeetSerializer.ts"],"sourcesContent":["import { Serializer, SerializerInterface } from '@metaplex-foundation/umi';\nimport { array } from './array';\nimport { bool } from './bool';\nimport { bytes } from './bytes';\nimport { dataEnum } from './dataEnum';\nimport { DeserializingEmptyBufferError } from './errors';\nimport { map } from './map';\nimport { nullable } from './nullable';\nimport {\n  f32,\n  f64,\n  i128,\n  i16,\n  i32,\n  i64,\n  i8,\n  u128,\n  u16,\n  u32,\n  u64,\n  u8,\n} from './numbers';\nimport { option } from './option';\nimport { publicKey } from './pubkey';\nimport { scalarEnum } from './scalarEnum';\nimport { set } from './set';\nimport { string } from './string';\nimport { struct } from './struct';\nimport { tuple } from './tuple';\nimport { unit } from './unit';\n\nexport type BeetSerializerOptions = {\n  /** @defaultValue `true` */\n  tolerateEmptyBuffers?: boolean;\n};\n\nfunction getTolerantSerializerFactory<\n  TSerializerFactory extends (...args: never[]) => Serializer<any, any>\n>(serializerFactory: TSerializerFactory): TSerializerFactory {\n  return ((...args) => {\n    const originalSerializer = serializerFactory(...args);\n    return {\n      ...originalSerializer,\n      deserialize(bytes: Uint8Array, offset = 0) {\n        try {\n          return originalSerializer.deserialize(bytes, offset);\n        } catch (e) {\n          if (\n            e instanceof DeserializingEmptyBufferError &&\n            e.toleratedDefaultValue !== undefined\n          ) {\n            return [e.toleratedDefaultValue, offset];\n          }\n          throw e;\n        }\n      },\n    };\n  }) as TSerializerFactory;\n}\n\nexport function createBeetSerializer(\n  options: BeetSerializerOptions = {}\n): SerializerInterface {\n  const shouldTolerateEmptyBuffers = options.tolerateEmptyBuffers !== false;\n  return {\n    tuple,\n    array: shouldTolerateEmptyBuffers\n      ? getTolerantSerializerFactory(array)\n      : array,\n    map: shouldTolerateEmptyBuffers ? getTolerantSerializerFactory(map) : map,\n    set: shouldTolerateEmptyBuffers ? getTolerantSerializerFactory(set) : set,\n    option: shouldTolerateEmptyBuffers\n      ? getTolerantSerializerFactory(option)\n      : option,\n    nullable: shouldTolerateEmptyBuffers\n      ? getTolerantSerializerFactory(nullable)\n      : nullable,\n    struct,\n    enum: scalarEnum,\n    dataEnum,\n    string,\n    bool,\n    unit,\n    u8,\n    u16,\n    u32,\n    u64,\n    u128,\n    i8,\n    i16,\n    i32,\n    i64,\n    i128,\n    f32,\n    f64,\n    bytes,\n    publicKey,\n  };\n}\n"],"names":["getTolerantSerializerFactory","serializerFactory","args","originalSerializer","deserialize","bytes","offset","e","DeserializingEmptyBufferError","toleratedDefaultValue","undefined","createBeetSerializer","options","shouldTolerateEmptyBuffers","tolerateEmptyBuffers","tuple","array","map","set","option","nullable","struct","enum","scalarEnum","dataEnum","string","bool","unit","u8","u16","u32","u64","u128","i8","i16","i32","i64","i128","f32","f64","publicKey"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAoCA,SAASA,4BAA4B,CAEnCC,iBAAqC,EAAsB;EAC3D,OAAQ,CAAC,GAAGC,IAAI,KAAK;AACnB,IAAA,MAAMC,kBAAkB,GAAGF,iBAAiB,CAAC,GAAGC,IAAI,CAAC,CAAA;IACrD,OAAO;AACL,MAAA,GAAGC,kBAAkB;AACrBC,MAAAA,WAAW,CAACC,KAAiB,EAAEC,MAAM,GAAG,CAAC,EAAE;QACzC,IAAI;AACF,UAAA,OAAOH,kBAAkB,CAACC,WAAW,CAACC,KAAK,EAAEC,MAAM,CAAC,CAAA;SACrD,CAAC,OAAOC,CAAC,EAAE;UACV,IACEA,CAAC,YAAYC,oCAA6B,IAC1CD,CAAC,CAACE,qBAAqB,KAAKC,SAAS,EACrC;AACA,YAAA,OAAO,CAACH,CAAC,CAACE,qBAAqB,EAAEH,MAAM,CAAC,CAAA;AAC1C,WAAA;AACA,UAAA,MAAMC,CAAC,CAAA;AACT,SAAA;AACF,OAAA;KACD,CAAA;GACF,CAAA;AACH,CAAA;AAEO,SAASI,oBAAoB,CAClCC,OAA8B,GAAG,EAAE,EACd;AACrB,EAAA,MAAMC,0BAA0B,GAAGD,OAAO,CAACE,oBAAoB,KAAK,KAAK,CAAA;EACzE,OAAO;WACLC,WAAK;IACLC,KAAK,EAAEH,0BAA0B,GAC7Bb,4BAA4B,CAACgB,WAAK,CAAC,GACnCA,WAAK;IACTC,GAAG,EAAEJ,0BAA0B,GAAGb,4BAA4B,CAACiB,OAAG,CAAC,GAAGA,OAAG;IACzEC,GAAG,EAAEL,0BAA0B,GAAGb,4BAA4B,CAACkB,OAAG,CAAC,GAAGA,OAAG;IACzEC,MAAM,EAAEN,0BAA0B,GAC9Bb,4BAA4B,CAACmB,aAAM,CAAC,GACpCA,aAAM;IACVC,QAAQ,EAAEP,0BAA0B,GAChCb,4BAA4B,CAACoB,iBAAQ,CAAC,GACtCA,iBAAQ;YACZC,aAAM;AACNC,IAAAA,IAAI,EAAEC,qBAAU;cAChBC,iBAAQ;YACRC,aAAM;UACNC,SAAI;UACJC,SAAI;QACJC,UAAE;SACFC,WAAG;SACHC,WAAG;SACHC,WAAG;UACHC,YAAI;QACJC,UAAE;SACFC,WAAG;SACHC,WAAG;SACHC,WAAG;UACHC,YAAI;SACJC,WAAG;SACHC,WAAG;WACHlC,WAAK;AACLmC,eAAAA,gBAAAA;GACD,CAAA;AACH;;;;"}