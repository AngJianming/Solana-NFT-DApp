'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var array = require('./array.cjs');
var bool = require('./bool.cjs');
var bytes = require('./bytes.cjs');
var dataEnum = require('./dataEnum.cjs');
var errors = require('./errors.cjs');
var map = require('./map.cjs');
var nullable = require('./nullable.cjs');
var numbers = require('./numbers.cjs');
var option = require('./option.cjs');
var pubkey = require('./pubkey.cjs');
var scalarEnum = require('./scalarEnum.cjs');
var set = require('./set.cjs');
var string = require('./string.cjs');
var struct = require('./struct.cjs');
var tuple = require('./tuple.cjs');
var unit = require('./unit.cjs');

function getTolerantSerializerFactory(serializerFactory) {
  return (...args) => {
    const originalSerializer = serializerFactory(...args);
    return {
      ...originalSerializer,
      deserialize(bytes, offset = 0) {
        try {
          return originalSerializer.deserialize(bytes, offset);
        } catch (e) {
          if (e instanceof errors.DeserializingEmptyBufferError && e.toleratedDefaultValue !== undefined) {
            return [e.toleratedDefaultValue, offset];
          }
          throw e;
        }
      }
    };
  };
}
function createBeetSerializer(options = {}) {
  const shouldTolerateEmptyBuffers = options.tolerateEmptyBuffers !== false;
  return {
    tuple: tuple.tuple,
    array: shouldTolerateEmptyBuffers ? getTolerantSerializerFactory(array.array) : array.array,
    map: shouldTolerateEmptyBuffers ? getTolerantSerializerFactory(map.map) : map.map,
    set: shouldTolerateEmptyBuffers ? getTolerantSerializerFactory(set.set) : set.set,
    option: shouldTolerateEmptyBuffers ? getTolerantSerializerFactory(option.option) : option.option,
    nullable: shouldTolerateEmptyBuffers ? getTolerantSerializerFactory(nullable.nullable) : nullable.nullable,
    struct: struct.struct,
    enum: scalarEnum.scalarEnum,
    dataEnum: dataEnum.dataEnum,
    string: string.string,
    bool: bool.bool,
    unit: unit.unit,
    u8: numbers.u8,
    u16: numbers.u16,
    u32: numbers.u32,
    u64: numbers.u64,
    u128: numbers.u128,
    i8: numbers.i8,
    i16: numbers.i16,
    i32: numbers.i32,
    i64: numbers.i64,
    i128: numbers.i128,
    f32: numbers.f32,
    f64: numbers.f64,
    bytes: bytes.bytes,
    publicKey: pubkey.publicKey
  };
}

exports.createBeetSerializer = createBeetSerializer;
//# sourceMappingURL=createBeetSerializer.cjs.map
