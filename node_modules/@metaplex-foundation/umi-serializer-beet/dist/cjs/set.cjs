'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var umi = require('@metaplex-foundation/umi');
var errors = require('./errors.cjs');
var getResolvedSize = require('./getResolvedSize.cjs');
var getSizeDescription = require('./getSizeDescription.cjs');
var getSizeFromChildren = require('./getSizeFromChildren.cjs');
var getSizePrefix = require('./getSizePrefix.cjs');
var numbers = require('./numbers.cjs');

function set(item, options = {}) {
  const size = options.size ?? numbers.u32();
  if (size === 'remainder' && item.fixedSize === null) {
    throw new errors.BeetSerializerError('Serializers of "remainder" size must have fixed-size items.');
  }
  return {
    description: options.description ?? `set(${item.description}; ${getSizeDescription.getSizeDescription(size)})`,
    fixedSize: getSizeFromChildren.getSizeFromChildren(size, [item.fixedSize]),
    maxSize: getSizeFromChildren.getSizeFromChildren(size, [item.maxSize]),
    serialize: set => {
      if (typeof size === 'number' && set.size !== size) {
        throw new errors.BeetSerializerError(`Expected set to have ${size} items but got ${set.size}.`);
      }
      const itemBytes = Array.from(set, value => item.serialize(value));
      return umi.mergeBytes([getSizePrefix.getSizePrefix(size, set.size), ...itemBytes]);
    },
    deserialize: (bytes, offset = 0) => {
      const set = new Set();
      if (typeof size === 'object' && bytes.slice(offset).length === 0) {
        throw new errors.DeserializingEmptyBufferError('set', new Set());
      }
      const [resolvedSize, newOffset] = getResolvedSize.getResolvedSize(size, [item.fixedSize], bytes, offset);
      offset = newOffset;
      for (let i = 0; i < resolvedSize; i += 1) {
        const [value, newOffset] = item.deserialize(bytes, offset);
        offset = newOffset;
        set.add(value);
      }
      return [set, offset];
    }
  };
}

exports.set = set;
//# sourceMappingURL=set.cjs.map
