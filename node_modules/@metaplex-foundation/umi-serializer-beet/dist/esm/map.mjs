import { mergeBytes } from '@metaplex-foundation/umi';
import { BeetSerializerError, DeserializingEmptyBufferError } from './errors.mjs';
import { getResolvedSize } from './getResolvedSize.mjs';
import { getSizeDescription } from './getSizeDescription.mjs';
import { getSizeFromChildren } from './getSizeFromChildren.mjs';
import { getSizePrefix } from './getSizePrefix.mjs';
import { u32 } from './numbers.mjs';

function map(key, value, options = {}) {
  const size = options.size ?? u32();
  if (size === 'remainder' && (key.fixedSize === null || value.fixedSize === null)) {
    throw new BeetSerializerError('Serializers of "remainder" size must have fixed-size items.');
  }
  return {
    description: options.description ?? `map(${key.description}, ${value.description}; ${getSizeDescription(size)})`,
    fixedSize: getSizeFromChildren(size, [key.fixedSize, value.fixedSize]),
    maxSize: getSizeFromChildren(size, [key.maxSize, value.maxSize]),
    serialize: map => {
      if (typeof size === 'number' && map.size !== size) {
        throw new BeetSerializerError(`Expected map to have ${size} items but got ${map.size}.`);
      }
      const itemBytes = Array.from(map, ([k, v]) => mergeBytes([key.serialize(k), value.serialize(v)]));
      return mergeBytes([getSizePrefix(size, map.size), ...itemBytes]);
    },
    deserialize: (bytes, offset = 0) => {
      const map = new Map();
      if (typeof size === 'object' && bytes.slice(offset).length === 0) {
        throw new DeserializingEmptyBufferError('map', new Map());
      }
      const [resolvedSize, newOffset] = getResolvedSize(size, [key.fixedSize, value.fixedSize], bytes, offset);
      offset = newOffset;
      for (let i = 0; i < resolvedSize; i += 1) {
        const [deserializedKey, kOffset] = key.deserialize(bytes, offset);
        offset = kOffset;
        const [deserializedValue, vOffset] = value.deserialize(bytes, offset);
        offset = vOffset;
        map.set(deserializedKey, deserializedValue);
      }
      return [map, offset];
    }
  };
}

export { map };
//# sourceMappingURL=map.mjs.map
