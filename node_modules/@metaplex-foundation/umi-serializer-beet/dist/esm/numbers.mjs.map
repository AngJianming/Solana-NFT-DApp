{"version":3,"file":"numbers.mjs","sources":["../../src/numbers.ts"],"sourcesContent":["import type { FixedSizeBeet } from '@metaplex-foundation/beet';\nimport * as beet from '@metaplex-foundation/beet';\nimport {\n  Endian,\n  NumberSerializerOptions,\n  reverseSerializer,\n  Serializer,\n} from '@metaplex-foundation/umi';\nimport { Buffer } from 'buffer';\nimport {\n  DeserializingEmptyBufferError,\n  OperationNotSupportedError,\n} from './errors';\n\n// Helpers.\nconst wrapBeet =\n  <T>(fixedBeet: FixedSizeBeet<T>) =>\n  (options: NumberSerializerOptions = {}): Serializer<T> => {\n    const isBigEndian = options.endian === Endian.Big;\n    let defaultDescription = fixedBeet.description;\n    if (fixedBeet.byteSize > 1) {\n      defaultDescription += isBigEndian ? '(be)' : '(le)';\n    }\n    const serializer: Serializer<T> = {\n      description: options.description ?? defaultDescription,\n      fixedSize: fixedBeet.byteSize,\n      maxSize: fixedBeet.byteSize,\n      serialize: (value: T) => {\n        const buffer = Buffer.alloc(fixedBeet.byteSize);\n        fixedBeet.write(buffer, 0, value);\n        return new Uint8Array(buffer);\n      },\n      deserialize: (bytes: Uint8Array, offset = 0) => {\n        if (bytes.slice(offset).length === 0) {\n          throw new DeserializingEmptyBufferError(fixedBeet.description);\n        }\n        const buffer = Buffer.from(bytes);\n        const value = fixedBeet.read(buffer, offset);\n        return [value, offset + fixedBeet.byteSize];\n      },\n    };\n\n    return isBigEndian ? reverseSerializer(serializer) : serializer;\n  };\n\nconst wrapBigintBeet =\n  (fixedBeet: FixedSizeBeet<beet.bignum>) =>\n  (\n    options: NumberSerializerOptions = {}\n  ): Serializer<number | bigint, bigint> => {\n    const isBigEndian = options.endian === Endian.Big;\n    const serializer: Serializer<number | bigint, bigint> = {\n      description:\n        options.description ??\n        fixedBeet.description + (isBigEndian ? '(be)' : '(le)'),\n      fixedSize: fixedBeet.byteSize,\n      maxSize: fixedBeet.byteSize,\n      serialize: (value: number | bigint) => {\n        const buffer = Buffer.alloc(fixedBeet.byteSize);\n        fixedBeet.write(buffer, 0, value);\n        return new Uint8Array(buffer);\n      },\n      deserialize: (bytes: Uint8Array, offset = 0) => {\n        if (bytes.slice(offset).length === 0) {\n          throw new DeserializingEmptyBufferError(fixedBeet.description);\n        }\n        const buffer = Buffer.from(bytes);\n        const rawValue = fixedBeet.read(buffer, offset);\n        const value = BigInt(\n          typeof rawValue === 'number' ? rawValue : rawValue.toString()\n        );\n        return [value, offset + fixedBeet.byteSize];\n      },\n    };\n\n    return isBigEndian ? reverseSerializer(serializer) : serializer;\n  };\n\n// Simple numbers.\nexport const u8 = wrapBeet(beet.u8);\nexport const u16 = wrapBeet(beet.u16);\nexport const u32 = wrapBeet(beet.u32);\nexport const i8 = wrapBeet(beet.i8);\nexport const i16 = wrapBeet(beet.i16);\nexport const i32 = wrapBeet(beet.i32);\n\n/**\n * Same as u16, but serialized with 1 to 3 bytes.\n *\n * If the value is above 0x7f, the top bit is set and the remaining\n * value is stored in the next bytes. Each byte follows the same\n * pattern until the 3rd byte. The 3rd byte, if needed, uses\n * all 8 bits to store the last byte of the original value.\n */\n/* eslint-disable no-bitwise */\nexport function shortU16(): Serializer<number> {\n  return {\n    description: 'shortU16',\n    fixedSize: null,\n    maxSize: 3,\n    serialize: (value: number): Uint8Array => {\n      if (value < 0 || value > 65535) {\n        throw new RangeError(\n          `Only values in the range [0, 65535] can be serialized to shortU16. \\`${value}\\` given.`\n        );\n      }\n      const bytes = [0];\n      for (let ii = 0; ; ii += 1) {\n        // Shift the bits of the value over such that the next 7 bits are at the right edge.\n\n        const alignedValue = value >> (ii * 7);\n        if (alignedValue === 0) {\n          // No more bits to consume.\n          break;\n        }\n        // Extract those 7 bits using a mask.\n        const nextSevenBits = 0b1111111 & alignedValue;\n        bytes[ii] = nextSevenBits;\n        if (ii > 0) {\n          // Set the continuation bit of the previous slice.\n          bytes[ii - 1] |= 0b10000000;\n        }\n      }\n      return new Uint8Array(bytes);\n    },\n    deserialize: (bytes: Uint8Array, offset = 0): [number, number] => {\n      let value = 0;\n      let byteCount = 0;\n      while (\n        ++byteCount // eslint-disable-line no-plusplus\n      ) {\n        const byteIndex = byteCount - 1;\n        const currentByte = bytes[offset + byteIndex];\n        const nextSevenBits = 0b1111111 & currentByte;\n        // Insert the next group of seven bits into the correct slot of the output value.\n        value |= nextSevenBits << (byteIndex * 7);\n        if ((currentByte & 0b10000000) === 0) {\n          // This byte does not have its continuation bit set. We're done.\n          break;\n        }\n      }\n      return [value, offset + byteCount];\n    },\n  };\n}\n/* eslint-enable no-bitwise */\n\n// Big numbers.\nexport const u64 = (options: NumberSerializerOptions = {}) => {\n  const serializer = wrapBigintBeet(beet.u64)(options);\n  return {\n    ...serializer,\n    serialize: (value: number | bigint) => {\n      if (value < 0) throw new RangeError('u64 cannot be negative');\n      return serializer.serialize(value);\n    },\n  };\n};\nexport const u128 = (options: NumberSerializerOptions = {}) => {\n  const serializer = wrapBigintBeet(beet.u128)(options);\n  return {\n    ...serializer,\n    serialize: (value: number | bigint) => {\n      if (value < 0) throw new RangeError('u128 cannot be negative');\n      return serializer.serialize(value);\n    },\n  };\n};\nexport const i64 = (options: NumberSerializerOptions = {}) => {\n  const serializer = wrapBigintBeet(beet.i64)(options);\n  return {\n    ...serializer,\n    serialize: (value: number | bigint) => {\n      if (value < (-2n) ** 63n) {\n        throw new RangeError('i64 cannot be lower than -2^63');\n      }\n      if (value > 2n ** 63n - 1n) {\n        throw new RangeError('i64 cannot be greater than 2^63 - 1');\n      }\n      return serializer.serialize(value);\n    },\n  };\n};\nexport const i128 = (options: NumberSerializerOptions = {}) => {\n  const serializer = wrapBigintBeet(beet.i128)(options);\n  return {\n    ...serializer,\n    serialize: (value: number | bigint) => {\n      if (value < (-2n) ** 127n) {\n        throw new RangeError('i128 cannot be lower than -2^127');\n      }\n      if (value > 2n ** 127n - 1n) {\n        throw new RangeError('i128 cannot be greater than 2^127 - 1');\n      }\n      return serializer.serialize(value);\n    },\n  };\n};\n\nexport const f32 = (): Serializer<number> => ({\n  description: 'f32 [not supported]',\n  fixedSize: 4,\n  maxSize: 4,\n  serialize: () => {\n    throw new OperationNotSupportedError('f32');\n  },\n  deserialize: () => {\n    throw new OperationNotSupportedError('f32');\n  },\n});\n\nexport const f64 = (): Serializer<number> => ({\n  description: 'f64 [not supported]',\n  fixedSize: 8,\n  maxSize: 8,\n  serialize: () => {\n    throw new OperationNotSupportedError('f64');\n  },\n  deserialize: () => {\n    throw new OperationNotSupportedError('f64');\n  },\n});\n"],"names":["wrapBeet","fixedBeet","options","isBigEndian","endian","Endian","Big","defaultDescription","description","byteSize","serializer","fixedSize","maxSize","serialize","value","buffer","Buffer","alloc","write","Uint8Array","deserialize","bytes","offset","slice","length","DeserializingEmptyBufferError","from","read","reverseSerializer","wrapBigintBeet","rawValue","BigInt","toString","u8","beet","u16","u32","i8","i16","i32","shortU16","RangeError","ii","alignedValue","nextSevenBits","byteCount","byteIndex","currentByte","u64","u128","i64","i128","f32","OperationNotSupportedError","f64"],"mappings":"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"}