import { array } from './array.mjs';
import { bool } from './bool.mjs';
import { bytes } from './bytes.mjs';
import { dataEnum } from './dataEnum.mjs';
import { DeserializingEmptyBufferError } from './errors.mjs';
import { map } from './map.mjs';
import { nullable } from './nullable.mjs';
import { u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, f32, f64 } from './numbers.mjs';
import { option } from './option.mjs';
import { publicKey } from './pubkey.mjs';
import { scalarEnum } from './scalarEnum.mjs';
import { set } from './set.mjs';
import { string } from './string.mjs';
import { struct } from './struct.mjs';
import { tuple } from './tuple.mjs';
import { unit } from './unit.mjs';

function getTolerantSerializerFactory(serializerFactory) {
  return (...args) => {
    const originalSerializer = serializerFactory(...args);
    return {
      ...originalSerializer,
      deserialize(bytes, offset = 0) {
        try {
          return originalSerializer.deserialize(bytes, offset);
        } catch (e) {
          if (e instanceof DeserializingEmptyBufferError && e.toleratedDefaultValue !== undefined) {
            return [e.toleratedDefaultValue, offset];
          }
          throw e;
        }
      }
    };
  };
}
function createBeetSerializer(options = {}) {
  const shouldTolerateEmptyBuffers = options.tolerateEmptyBuffers !== false;
  return {
    tuple,
    array: shouldTolerateEmptyBuffers ? getTolerantSerializerFactory(array) : array,
    map: shouldTolerateEmptyBuffers ? getTolerantSerializerFactory(map) : map,
    set: shouldTolerateEmptyBuffers ? getTolerantSerializerFactory(set) : set,
    option: shouldTolerateEmptyBuffers ? getTolerantSerializerFactory(option) : option,
    nullable: shouldTolerateEmptyBuffers ? getTolerantSerializerFactory(nullable) : nullable,
    struct,
    enum: scalarEnum,
    dataEnum,
    string,
    bool,
    unit,
    u8,
    u16,
    u32,
    u64,
    u128,
    i8,
    i16,
    i32,
    i64,
    i128,
    f32,
    f64,
    bytes,
    publicKey
  };
}

export { createBeetSerializer };
//# sourceMappingURL=createBeetSerializer.mjs.map
