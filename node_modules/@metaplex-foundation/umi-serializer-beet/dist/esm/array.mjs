import { mergeBytes } from '@metaplex-foundation/umi';
import { BeetSerializerError, DeserializingEmptyBufferError } from './errors.mjs';
import { getResolvedSize } from './getResolvedSize.mjs';
import { getSizeDescription } from './getSizeDescription.mjs';
import { getSizeFromChildren } from './getSizeFromChildren.mjs';
import { getSizePrefix } from './getSizePrefix.mjs';
import { u32 } from './numbers.mjs';

function array(item, options = {}) {
  const size = options.size ?? u32();
  if (size === 'remainder' && item.fixedSize === null) {
    throw new BeetSerializerError('Serializers of "remainder" size must have fixed-size items.');
  }
  return {
    description: options.description ?? `array(${item.description}; ${getSizeDescription(size)})`,
    fixedSize: getSizeFromChildren(size, [item.fixedSize]),
    maxSize: getSizeFromChildren(size, [item.maxSize]),
    serialize: value => {
      if (typeof size === 'number' && value.length !== size) {
        throw new BeetSerializerError(`Expected array to have ${size} items but got ${value.length}.`);
      }
      return mergeBytes([getSizePrefix(size, value.length), ...value.map(v => item.serialize(v))]);
    },
    deserialize: (bytes, offset = 0) => {
      if (typeof size === 'object' && bytes.slice(offset).length === 0) {
        throw new DeserializingEmptyBufferError('array', []);
      }
      const [resolvedSize, newOffset] = getResolvedSize(size, [item.fixedSize], bytes, offset);
      offset = newOffset;
      const values = [];
      for (let i = 0; i < resolvedSize; i += 1) {
        const [value, newOffset] = item.deserialize(bytes, offset);
        values.push(value);
        offset = newOffset;
      }
      return [values, offset];
    }
  };
}

export { array };
//# sourceMappingURL=array.mjs.map
